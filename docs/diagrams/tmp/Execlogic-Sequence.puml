@startuml

skinparam monochrome true
'skinparam style strictuml
'skinparam handwritten true
'skinparam linetype polyline

autonumber

participant Client as client
participant Manager as manager
participant Cluster as cluster
participant Scheduler as scheduler
participant Worker as worker
participant Library as library

activate client

client -> manager : createProgram(cId : String)
activate manager
        manager -> cluster : createProgram(cId : String)
        activate cluster
        cluster --> manager : pId : String
        deactivate cluster
        manager -> manager : persist(p : Program)
manager --> client : pId : String
deactivate manager

client -> manager : createJob(pId : String)
activate manager
        manager -> cluster : createJob(pId : String)
        activate cluster
            cluster -> cluster: program.addJob(j : Job)
            cluster -> scheduler : addJob(jId : String)
            activate scheduler
                scheduler -> worker : createQueue(jId : String)
                activate worker
                worker --> scheduler
                deactivate worker
            scheduler --> cluster
            deactivate scheduler
        cluster --> manager : jId : String
        deactivate cluster
        manager -> manager : persist(j : Job)
manager --> client : jId : String
deactivate manager

loop over all tasks
client -> manager : createTask(pId : String, jId : String, r : RoutineInstanceDTO)
activate manager
        manager -> cluster : createTask(pId : String, jId : String, r : RoutineInstanceDTO)
        activate cluster
            cluster -> library : getRoutine(rId : String)
            activate library
            library --> cluster : routine : RoutineDTO
            deactivate library
            cluster -> cluster : checkInputParameters()
            cluster -> cluster : job.addTask(t : Task)
            cluster -> scheduler : schedule(jId : String, t : TaskDTO)
            activate scheduler
                scheduler -> worker : queueTasks(jId : String, t : List<TaskDTO>)
                activate worker
                worker --> scheduler
                deactivate worker
            scheduler --> cluster
            deactivate scheduler
        cluster --> manager : tId : String
        deactivate cluster
        manager -> manager : persist(t : Task)
manager --> client : tId : String
deactivate manager
end

client -> manager : markJobAsComplete(pId : String, jId : String)
activate manager
    manager -> cluster : markJobAsComplete(pId : String, jId : String)
    activate cluster
        cluster -> cluster : job.markAsComplete()
    cluster --> manager
    deactivate cluster
    manager -> manager : job.markAsComplete()
    manager -> manager : persist(j : Job)
manager --> client
deactivate manager

loop until job is finished
client -> manager : getJobInfo(pId : String, jId : String)
activate manager
    manager -> cluster : getJobInfo(pId : String, jId : String)
    activate cluster
    cluster --> manager : j : JobDTO
    deactivate cluster
    manager -> manager : persist(j : Job)
manager --> client : j : JobDTO
deactivate manager
end

loop over all tasks
client -> manager : getTaskInfo(pId : String, jId : String, tId : String)
activate manager
    manager -> cluster : getTaskInfo(pId : String, jId : String, tId : String)
    activate cluster
    cluster --> manager : t : TaskDTO
    deactivate cluster
    manager -> manager: persist(t : Task)
manager --> client : t : TaskDTO
deactivate manager
end

deactivate client

@enduml