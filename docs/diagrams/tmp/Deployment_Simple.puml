@startuml

skinparam linetype polyline

node Client <<Client PC>> {
    node PSE <<Problem Solving Env.>> {
        artifact "client" as c_client
    }
    agent "WebBrowser" as c_browser
}

node master <<Linux Server>> {
    node "Java 8" as m_java <<Execution Environment>> {
        artifact "manager.jar " as manager
        artifact "cluster.jar " as cluster
        artifact "library.jar " as m_library
        artifact "scheduler.jar " as scheduler

        manager --> cluster : "TCP (Thrift)"
        manager --> m_library : "TCP (Thrift)"
        cluster -> m_library : "TCP (Thrift)"
        cluster --> scheduler : "TCP (Thrift)"
    }
}

node dbserver <<DB Server>> {
    node "MySQL" <<RDBMS>> {
        database DEF as def
    }
}

node worker1 <<Linux Server>> {
    node "Java 8" as w1_java <<Execution Environment>> {
        artifact "worker.jar " as w1_worker
        artifact "library.jar " as w1_library

        w1_worker -> w1_library : "TCP (Thrift)"
    }
}

node worker2 <<Linux Server>> {
    node "Java 8" as w2_java <<Execution Environment>> {
        artifact "worker.jar " as w2_worker
        artifact "library.jar " as w2_library

        w2_worker -> w2_library : "TCP (Thrift)"
    }
}

node workerN <<Linux Server>> {
    node "Java 8" as wn_java <<Execution Environment>> {
        artifact "worker.jar " as wn_worker
        artifact "library.jar " as wn_library

        wn_worker -> wn_library : "TCP (Thrift)"
    }
}

c_client --> manager : RESTful
c_browser --> manager : HTTP

manager -[#black]-> def : SQL
m_library -[#black]-> def : SQL

cluster --[#black]-> w1_worker: "TCP (Thrift)"
cluster --[#black]-> w2_worker: "TCP (Thrift)"
cluster --[#black]-> wn_worker: "TCP (Thrift)"
scheduler --[#black]-> w1_worker: "TCP (Thrift)"
scheduler --[#black]-> w2_worker: "TCP (Thrift)"
scheduler --[#black]-> wn_worker: "TCP (Thrift)"

m_library <--[#grey]- w1_library : "TCP (Thrift)"
m_library <--[#grey]- w2_library : "TCP (Thrift)"
m_library <--[#grey]- wn_library : "TCP (Thrift)"
@enduml